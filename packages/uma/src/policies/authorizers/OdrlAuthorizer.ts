import {Authorizer} from "./Authorizer";
import {basicPolicy, ODRL, UCPPolicy, UCRulesStorage} from "@solidlab/ucp";
import {WEBID} from "../../credentials/Claims";
import {ODRLEvaluator, ODRLEngineMultipleSteps } from 'odrl-evaluator'
import {DataFactory, Literal, NamedNode, Quad_Subject, Store } from "n3";
import {createVocabulary, DC, RDF} from "@solid/community-server";
import { Logger } from "../../util/logging/Logger";
import {getLoggerFor} from "../../util/logging/LoggerUtils";
import {ClaimSet} from "../../credentials/ClaimSet";
import {Permission} from "../../views/Permission";
import {Requirements} from "../../credentials/Requirements";
const {quad, namedNode, literal} = DataFactory

/**
 * Permission evaluation is performed as follows:
 *
 * 1. Conversion of Permission queries to ODRL Requests.
 *    - A translation is performed to transform CSS actions to ODRL actions.
 *    - One ODRL Request per Action and target Resource.
 *
 * 2. ODRL Evaluator performs ODRL Evaluation
 *    - No policy selection is performed (all policies are inserted rather than all relevant).
 *    - No conflict resolution strategy is present (Prohibition policies are ignored).
 *    - No duties are checked.
 *
 * 3. Conversion from ODRL Policy Compliance Reports to Permissions
 *    - Selecting the ODRL actions from Active Permission Reports
 *    - Translation from ODRL actions to CSS actions
 */
export class OdrlAuthorizer implements Authorizer {
    protected readonly logger: Logger = getLoggerFor(this);
    private readonly odrlEvaluator: ODRLEvaluator;

    /**
     * Creates a OdrlAuthorizer enforcing policies using ODRL with the ODRL Evaluator.
     *
     *
     * @param policies - A store containing the ODRL policy rules.
     */
    constructor(
        private readonly policies: UCRulesStorage,
    ) {
        // const engine = new ODRLEngineMultipleSteps(new EyeReasoner('/usr/local/bin/eye', ["--quiet", "--nope", "--pass-only-new"]));
        const engine = new ODRLEngineMultipleSteps();
        this.odrlEvaluator = new ODRLEvaluator(engine);
    }

    public async permissions(claims: ClaimSet, query?: Permission[]): Promise<Permission[]> {
        this.logger.info('Calculating permissions.', {claims, query});
        if (!query) {
            this.logger.warn('The OdrlAuthorizer can only calculate permissions for explicit queries.')
            return [];
        }

        // key value store for building the permissions to be granted on a resource
        const grantedPermissions: { [key: string]: string[] } = {};

        // prepare policy
        const policyStore = (await this.policies.getStore())

        // prepare sotw
        const sotw = new Store();
        sotw.add(quad(namedNode('http://example.com/request/currentTime'), namedNode('http://purl.org/dc/terms/issued'), literal(new Date().toISOString(), namedNode("http://www.w3.org/2001/XMLSchema#dateTime"))));

        const subject = typeof claims[WEBID] === 'string' ? claims[WEBID] : 'urn:solidlab:uma:id:anonymous';


        for (const {resource_id, resource_scopes} of query) {
            if (!resource_id) {
                this.logger.warn('The OdrlAuthorizer can only calculate permissions for explicit resources.');
                continue;
            }

            grantedPermissions[resource_id] = [];
            const actions = resource_scopes ? transformActionsCssToOdrl(resource_scopes) : ["http://www.w3.org/ns/odrl/2/use"]
            for (const action of actions) {
                this.logger.info(`Evaluating Request [S R AR]: [${subject} ${resource_id} ${action}]`);
                const requestPolicy: UCPPolicy = {
                    type: ODRL.Request,
                    rules: [
                        {
                            action: action,
                            resource: resource_id,
                            requestingParty: subject
                        }
                    ]
                }
                const requestStore = basicPolicy(requestPolicy).representation
                // evaluate policies
                const reports = await this.odrlEvaluator.evaluate(
                    [...policyStore],
                    [...requestStore],
                    [...sotw]);
                const reportStore = new Store(reports);

                // TODO: handle multiple reports -> possible to be generated
                // NOTE: current strategy, add all actions of active reports generated by the request
                // fetch active and attempted
                const PolicyReportNodes = reportStore.getSubjects(RDF.type, CR.PolicyReport, null);
                for (const policyReportNode of PolicyReportNodes) {
                    const policyReport = parseComplianceReport(policyReportNode, reportStore)
                    if (policyReport.ruleReport[0].activationState === ActivationState.Active &&
                        policyReport.ruleReport[0].type === RuleReportType.PermissionReport) {
                        grantedPermissions[resource_id].push(action);
                    }
                }
            }
        }
        const permissions: Permission[] = []
        Object.keys(grantedPermissions).forEach(
            resource_id => permissions.push({
                resource_id,
                resource_scopes: transformActionsOdrlToCss(grantedPermissions[resource_id])
            }) );
        return permissions;
    }

    public async credentials(permissions: Permission[], query?: Requirements | undefined): Promise<Requirements[]> {
        throw new Error("Method not implemented.");
    }

}
const scopeCssToOdrl: Map<string, string> = new Map();
scopeCssToOdrl.set('urn:example:css:modes:read','http://www.w3.org/ns/odrl/2/read');
scopeCssToOdrl.set('urn:example:css:modes:append','http://www.w3.org/ns/odrl/2/append');
scopeCssToOdrl.set('urn:example:css:modes:create','http://www.w3.org/ns/odrl/2/create');
scopeCssToOdrl.set('urn:example:css:modes:delete','http://www.w3.org/ns/odrl/2/delete');
scopeCssToOdrl.set('urn:example:css:modes:write','http://www.w3.org/ns/odrl/2/write');

const scopeOdrlToCss : Map<string, string> = new Map(Array.from(scopeCssToOdrl, entry => [entry[1], entry[0]]));

/**
 * Transform the Actions enforced by the Community Solid Server to equivalent ODRL Actions
 * @param actions
 */
function transformActionsCssToOdrl(actions: string[]): string[] {
    // scopes come from UmaClient.ts -> see CSS package

    // in UMAPermissionReader, only the last part of the URN will be used, divided by a colon
    // again, see CSS package
    return actions.map(action => scopeCssToOdrl.get(action)!);
}
/**
 * Transform ODRL Actions to equivalent Actions enforced by the Community Solid Server
 * @param actions
 */
function transformActionsOdrlToCss(actions: string[]): string[] {
    const cssActions = []
    for (const action of actions) {
        if (action === 'http://www.w3.org/ns/odrl/2/use'){
            return Array.from(scopeCssToOdrl.keys());
        }
        cssActions.push(scopeOdrlToCss.get(action)!);
    }
    return cssActions;
}

type PolicyReport = {
    id: NamedNode;
    created: Literal;
    request: NamedNode;
    policy: NamedNode;
    ruleReport: RuleReport[];
}
type RuleReport = {
    id: NamedNode;
    type: RuleReportType;
    activationState: ActivationState
    rule: NamedNode;
    requestedRule: NamedNode;
    premiseReport: PremiseReport[]
}

type PremiseReport = {
    id: NamedNode;
    type:PremiseReportType;
    premiseReport: PremiseReport[];
    satisfactionState: SatisfactionState
}

// is it possible to just use CR.namespace + "term"?
// https://github.com/microsoft/TypeScript/issues/40793
enum RuleReportType {
    PermissionReport= 'http://example.com/report/temp/PermissionReport',
    ProhibitionReport= 'http://example.com/report/temp/ProhibitionReport',
    ObligationReport= 'http://example.com/report/temp/ObligationReport',
}
enum SatisfactionState {
    Satisfied= 'http://example.com/report/temp/Satisfied',
    Unsatisfied= 'http://example.com/report/temp/Unsatisfied',
}

enum PremiseReportType {
    ConstraintReport = 'http://example.com/report/temp/ConstraintReport',
    PartyReport = 'http://example.com/report/temp/PartyReport',
    TargetReport = 'http://example.com/report/temp/TargetReport',
    ActionReport = 'http://example.com/report/temp/ActionReport',
}

enum ActivationState {
    Active= 'http://example.com/report/temp/Active',
    Inactive= 'http://example.com/report/temp/Inactive',
}

/**
 * Parses an ODRL Compliance Report Model into a {@link PolicyReport}.
 * @param identifier
 * @param store
 */
function parseComplianceReport(identifier: Quad_Subject, store: Store): PolicyReport {
    const exists = store.getQuads(identifier,RDF.type,CR.PolicyReport, null).length === 1;
    if (!exists) { throw Error(`No Policy Report found with: ${identifier}.`); }
    const ruleReportNodes = store.getObjects(identifier, CR.ruleReport, null) as NamedNode[];

    return {
        id: identifier as NamedNode,
        created: store.getObjects(identifier, DC.namespace+"created", null)[0] as Literal,
        policy: store.getObjects(identifier, CR.policy, null)[0] as NamedNode,
        request: store.getObjects(identifier, CR.policyRequest, null)[0] as NamedNode,
        ruleReport: ruleReportNodes.map(ruleReportNode => parseRuleReport(ruleReportNode, store))
    }
}

/**
 * Parses Rule Reports from a Compliance Report, including its premises
 * @param identifier
 * @param store
 */
function parseRuleReport(identifier: Quad_Subject, store: Store): RuleReport {
    const premiseNodes = store.getObjects(identifier,CR.premiseReport, null) as NamedNode[];
    return {
        id: identifier as NamedNode,
        type: store.getObjects(identifier, RDF.type, null)[0].value as RuleReportType,
        activationState: store.getObjects(identifier, CR.activationState, null)[0].value as ActivationState,
        requestedRule: store.getObjects(identifier, CR.ruleRequest, null)[0] as NamedNode,
        rule: store.getObjects(identifier, CR.rule, null)[0] as NamedNode,
        premiseReport: premiseNodes.map((prem) => parsePremiseReport(prem, store))
    }
}

/**
 * Parses Premise Reports, including premises of a Premise Report itself.
 * Note that if for some reason there are circular premise reports, this will result into an infinite loop
 * @param identifier
 * @param store
 */
function parsePremiseReport(identifier: Quad_Subject, store: Store): PremiseReport {
    const nestedPremises = store.getObjects(identifier, CR.PremiseReport, null) as NamedNode[];
    return {
        id: identifier as NamedNode,
        type: store.getObjects(identifier, RDF.type, null)[0].value as PremiseReportType,
        premiseReport: nestedPremises.map((prem) => parsePremiseReport(prem, store)),
        satisfactionState: store.getObjects(identifier, CR.satisfactionState, null)[0].value as SatisfactionState
    }
}
const CR = createVocabulary('http://example.com/report/temp/',
    'PolicyReport',
    'RuleReport',
    'PermissionReport',
    'ProhibitionReport',
    'DutyReport',
    'PremiseReport',
    'ConstraintReport',
    'PartyReport',
    'ActionReport',
    'TargetReport',
    'ActivationState',
    'Active',
    'Inactive',
    'AttemptState',
    'Attempted',
    'NotAttempted',
    'PerformanceState',
    'Performed',
    'Unperformed',
    'Unknown',
    'DeonticState',
    'NonSet',
    'Violated',
    'Fulfilled',
    'SatisfactionState',
    'Satisfied',
    'Unsatisfied',
    'policy',
    'policyRequest',
    'ruleReport',
    'conditionReport',
    'premiseReport',
    'rule',
    'ruleRequest',
    'activationState',
    'attemptState',
    'performanceState',
    'deonticState',
    'constraint',
    'satisfactionState',
    )
